{"version":3,"file":"static/js/43.b7590742.chunk.js","mappings":"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","sources":["components/table/dropDownItems/DeleteDropDownItem.jsx","components/table/dropDownItems/EditDropDownItem.jsx","components/table/dropDownItems/TableActions.jsx","modules/category/views/columns.js","modules/category/views/CategoryTable.jsx","utility/helpers/toastHelper.js"],"sourcesContent":["import { Trash } from \"react-feather\";\nimport { Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport MySwal from \"sweetalert2\";\n\nconst DeleteDropDownItem = ({isLoading, handleDelete}) => {\n    const handleConfirmText = () => {\n        return MySwal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-outline-danger ms-1'\n            },\n            buttonsStyling: false\n        }).then(function (result) {\n            if (result.isConfirmed === true) {\n                handleDelete()\n            }\n\n            if (isLoading === false) {\n                MySwal.fire({\n                    icon: 'success',\n                    title: 'Deleted!',\n                    text: 'Your file has been deleted.',\n                    customClass: {\n                        confirmButton: 'btn btn-success'\n                    }\n                })\n            }\n        })\n    }\n    return (\n        <>\n            <Button\n                onClick={handleConfirmText}\n                size='sm'\n                color='transparent'\n                className='btn btn-icon'\n            >\n                <Trash className='font-medium-2' />\n            </Button>\n        </>\n    )\n}\n\nDeleteDropDownItem.propTypes = {\n    handleDelete: PropTypes.func.isRequired\n}\n\nexport default DeleteDropDownItem;","import { Button} from \"reactstrap\";\nimport PropTypes from 'prop-types'\nimport { Edit } from \"react-feather\";\n\nconst EditDropDownItem = ({ onClick }) => {\n    return <Button size='sm' color='transparent' className='btn btn-icon' onClick={onClick}>\n        <Edit className='font-medium-2' />\n    </Button>\n}\n\nEditDropDownItem.propTypes = {\n    onClick: PropTypes.func.isRequired\n}\n\nexport default EditDropDownItem;","const TableActions = ({actions}) => {\n    return <div className='d-flex align-items-center permissions-actions'>\n          {actions}\n        </div>\n}\n\nexport default TableActions;","import DeleteDropDownItem from \"../../../components/table/dropDownItems/DeleteDropDownItem\";\nimport EditDropDownItem from \"../../../components/table/dropDownItems/EditDropDownItem\";\nimport TableActions from \"../../../components/table/dropDownItems/TableActions\";\n\nconst generateActions = (row, props) => {\n    const {handleOpen, setOpen, showOne, handleDelete} = props;\n\n    const actions = [\n        <EditDropDownItem key={0} onClick={() => {\n            showOne(row.id)\n            handleOpen(false)\n            setOpen(true)\n        }}/>,\n        <DeleteDropDownItem key={1} handleDelete={() => handleDelete(row.id)}/>\n    ]\n\n    return <TableActions row={row} actions={actions}/>\n}\n\nconst getColumns = (props) => {\n    return [\n        {\n            sortable: true,\n            name: 'ID',\n            minwidth: '225px',\n            selector: row => row.id\n        },\n        {\n            sortable: true,\n            name: 'Name',\n            minwidth: '250px',\n            selector: row => row.name\n        },\n        {\n            name: 'Actions',\n            minwidth: '100px',\n            cell: row => generateActions(row, props)\n        }\n    ];\n}\n\nexport default getColumns;","import getColumns from './columns'\nimport {lazy, useState} from \"react\";\nimport {toastLoader} from \"../../../utility/helpers/toastHelper\";\nimport {useSelector} from \"react-redux\";\nimport {emptyCategoryForm} from \"../containers/CategoryContainer\";\n\nconst CustomTable = lazy(() => import('../../../components/table/CustomTable'))\nconst CategoryForm = lazy(() => import('./CategoryForm'))\n\nconst CategoryTable = ({\n                           formFields,\n                           showOne,\n                            handleDelete,\n                           data = {},\n                           paginationObject = {},\n                            setInAdd\n}) => {\n    const allCategoriesLoading = useSelector(state => state.loading.categories.all)\n    const [isOpened, setOpen] = useState(false);\n    const handleOpen = (inAdd = true) => {\n        formFields.resetForm(emptyCategoryForm)\n        setOpen(true)\n        setInAdd(inAdd)\n    }\n\n    toastLoader(allCategoriesLoading)\n\n    return (\n        <>\n            <CustomTable\n                handleOpen={handleOpen}\n                columns={getColumns({handleOpen, showOne, setOpen, handleDelete})}\n                data={data.allCategories}\n                pagination={true}\n                paginationObject={paginationObject}\n                handlePageChange\n                title='Categories'\n            />\n\n            <CategoryForm\n                show={isOpened}\n                setShow={setOpen}\n                formFields={{...formFields, setShow: setOpen, show: isOpened}}\n                onSubmit={(values) => formFields.handleSubmit(values)}\n            />\n        </>\n    );\n}\n\nexport default CategoryTable;","import {useEffect} from \"react\";\nimport toastFactory from \"../factories/toastFactory\";\n\nexport const toastLoader = (isLoading = false) => {\n    useEffect(() => {\n        if (isLoading) {\n            toastFactory.dismiss()\n            toastFactory.loading('Loading')\n        } else {\n            toastFactory.dismiss()\n        }\n    }, [isLoading])\n}"],"names":["_ref","isLoading","handleDelete","_jsx","_Fragment","children","Button","onClick","handleConfirmText","MySwal","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","isConfirmed","size","color","className","Trash","Edit","actions","props","sortable","name","minwidth","selector","row","id","cell","generateActions","handleOpen","setOpen","showOne","EditDropDownItem","DeleteDropDownItem","TableActions","CustomTable","lazy","CategoryForm","formFields","data","paginationObject","setInAdd","allCategoriesLoading","useSelector","state","loading","categories","all","isOpened","useState","inAdd","arguments","length","undefined","resetForm","emptyCategoryForm","useEffect","toastFactory","dismiss","toastLoader","_jsxs","columns","getColumns","allCategories","pagination","handlePageChange","show","setShow","onSubmit","values","handleSubmit"],"sourceRoot":""}