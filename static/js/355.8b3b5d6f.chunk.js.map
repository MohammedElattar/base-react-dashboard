{"version":3,"file":"static/js/355.8b3b5d6f.chunk.js","mappings":"8KAEA,MAAMA,EAAeC,IAAkE,IAAjE,cAACC,EAAa,iBAAEC,EAAgB,SAAEC,EAAQ,eAAEC,GAAeJ,EAC7E,MAAO,CACHC,gBACAI,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,oBAAoB,EACpBN,mBACAC,cACGC,EACN,EAGLL,EAAaU,UAAY,CACrBR,cAAeS,IAAAA,OACfR,iBAAkBQ,IAAAA,OAAiBC,WACnCR,SAAUO,IAAAA,KAAeC,YAG7B,UCjBaC,EAAkBC,IAC3B,MAAMC,EAAef,EAAac,GAElC,OAAOE,EAAAA,EAAAA,IAAUD,EAAa,EAGlCF,EAAeH,UAAY,CACvBR,cAAeS,IAAAA,OACfR,iBAAkBQ,IAAAA,OAAiBC,WACnCR,SAAUO,IAAAA,KAAeC,WACzBP,eAAgBM,IAAAA,Q,aCZb,MAAMM,EAAsBA,CAACC,EAAcC,KAAc,IAADC,EAY3D,OAXID,GACAE,OAAOC,KAAKH,GAAUI,SAASC,IACrBL,EAASK,UACJN,EAAaM,GAEpBN,EAAaM,GAAOL,EAASK,EACjC,IAK0B,QAAlCJ,EAAOC,OAAOI,OAAOP,UAAa,IAAAE,OAAA,EAA3BA,EAA6BM,QAAQC,KAAWA,GAAK,EAYnDC,EAAiBT,GAMnBF,EALc,CACjBY,SAAU,WACVC,IAAK,SAGgCX,GAuB7C,EApBwBY,IACpB,IAAIC,EAASC,EAAAA,KAAaC,MAAM,CAAC,GAgBjC,OAdAb,OAAOc,QAAQJ,GAAgBR,SAAQtB,IAA8B,IAA5BmC,EAAWC,GAAWpC,EAC3D,GAAIoC,EAAY,CACZ,IAAIC,EAAcL,EAAAA,KAElBI,EAAWd,SAAQgB,IACf,MAAOC,KAAaC,GAAUF,EAAKG,MAAM,KAEzCJ,EAAcA,EAAYE,MAAaC,EAAO,IAGlDT,EAASA,EAAOE,MAAM,CAAC,CAACE,GAAYE,GACxC,KAGGN,CAAM,EC3CjB,EAPoBW,KAChB,OAAOC,EAAe,CAClBC,ODamB1B,ECbD,CAACU,SAAU,MDmB1BZ,EALc,CACjBY,SAAU,WACVgB,MAAO,SAG8B1B,IClBrC2B,SAAUlB,EAAc,CAACE,IAAK,SDYXX,KCXrB,E,cCJN,MAgBA,EAhBqB4B,KACjB,MAAM,cAACC,EAAa,cAAEC,IAAiBC,EAAAA,EAAAA,MACjC,SAACC,EAAQ,UAAEC,EAAS,KAAEC,GAAQJ,EAMpC,MAAO,CACHK,YALgBC,gBACVP,EAAcQ,EAAQ,EAK5BL,WACAC,YACAC,OACH,E,+DCLL,MAAMI,GAAYC,EAAAA,EAAAA,OAAK,IAAM,gCAmC7B,EAjCuBC,KACnB,MAAMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,MACFC,EAAAA,EAAAA,MACAH,EAASI,EAAAA,KAETC,EAAAA,EAAAA,IACJ,GACD,CAACL,IAEJ,MAAM,YAACN,EAAW,UAAEF,EAAS,KAAEC,GAAQN,IACjCmB,EAASrD,EAAe,CAC1BX,cAAe,CAAC2C,MAAO,GAAIC,SAAU,IACrC3C,iBAAkBgE,IAClB/D,SAAWqB,GAAW6B,EAAY7B,KAStC,OANAqC,EAAAA,EAAAA,YAAU,KACFT,IAASe,EAAAA,EAAaC,IACtBT,EAASI,EAAAA,GAAe,CAACM,SAAS,GACtC,GACD,CAACjB,KAEGkB,EAAAA,EAAAA,KAACd,EAAS,CACbe,aAAcN,EAAOM,aACrBC,aAAcP,EAAOzC,OACrBiD,aAAcR,EAAOQ,aACrBC,aAAcT,EAAOU,OACrBC,aAAczB,GAChB,C","sources":["utility/formik/formikConfig.js","utility/formik/formikHelper.js","helpers/validationRuleHelper.js","modules/auth/validation/LoginSchema.js","modules/auth/services/loginService.js","modules/auth/containers/LoginContainer.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\n\nconst FormikConfig = ({initialValues, validationSchema, onSubmit, overrideConfig}) => {\n    return {\n        initialValues,\n        validateOnBlur: true,\n        validateOnChange: false,\n        validateOnMount: false,\n        enableReinitialize: true,\n        validationSchema,\n        onSubmit,\n        ...overrideConfig\n    }\n}\n\nFormikConfig.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default FormikConfig","import {useFormik} from \"formik\";\nimport FormikConfig from \"./formikConfig\";\nimport PropTypes from \"prop-types\";\n\nexport const formikInstance = (props) => {\n    const formikConfig = FormikConfig(props)\n\n    return useFormik(formikConfig)\n}\n\nformikInstance.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    overrideConfig: PropTypes.object\n}","import * as Yup from 'yup'\n\nexport const replaceDefaultRules = (defaultRules, newRules) => {\n    if (newRules) {\n        Object.keys(newRules).forEach((key) => {\n            if (!!newRules[key]) {\n                delete defaultRules[key]\n            } else {\n                defaultRules[key] = newRules[key]\n            }\n        })\n    }\n\n\n    return Object.values(defaultRules)?.filter((item) => !!item)\n}\n\nexport const emailRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        email: 'email'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const passwordRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        min: 'min:8'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nconst generateSchema = (allRulesObject) => {\n    let schema = Yup.object().shape({})\n\n    Object.entries(allRulesObject).forEach(([fieldName, fieldRules]) => {\n        if (fieldRules) {\n            let fieldSchema = Yup.string()\n\n            fieldRules.forEach(rule => {\n                const [ruleName, ...params] = rule.split(':')\n\n                fieldSchema = fieldSchema[ruleName](...params)\n            })\n\n            schema = schema.shape({[fieldName]: fieldSchema})\n        }\n    })\n\n    return schema\n}\n\nexport default generateSchema","import generateSchema, {emailRules, passwordRules} from \"../../../helpers/validationRuleHelper\"\n\nconst LoginSchema = () => {\n    return generateSchema({\n        email: emailRules({required: null}),\n        password: passwordRules({min: null})\n    })\n}\n\nexport default LoginSchema\n\n// export type nn= z.infer<ReaturnValue<typeof","import {useAuthLogic} from \"../hooks/useAuthLogic\";\n\nconst LoginService = () => {\n    const {dispatchLogin, loginSelector} = useAuthLogic()\n    const {userInfo, isLoading, code} = loginSelector;\n\n    const handleLogin = async (payload) => {\n        await dispatchLogin(payload)\n    }\n\n    return {\n        handleLogin,\n        userInfo,\n        isLoading,\n        code\n    }\n}\n\nexport default LoginService\n","import {lazy, useEffect} from \"react\"\nimport {formikInstance} from \"../../../utility/formik/formikHelper\";\nimport loginSchema from \"../validation/LoginSchema\";\nimport LoginService from \"../services/loginService\";\nimport {HttpResponse} from \"../../../constants/api\";\nimport {useNavigate} from \"react-router-dom\";\nimport {DEFAULT_ROUTE} from \"../../../constants/routes\";\nimport {isUserLoggedIn} from \"../utils/authHelper\";\nimport {resetStore} from \"../../../redux/store\";\n\nconst LoginView = lazy(() => import(\"../views/LoginView\"))\n\nconst LoginContainer = () => {\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        if (isUserLoggedIn()) {\n            navigate(DEFAULT_ROUTE);\n        } else {\n            resetStore()\n        }\n    }, [navigate]);\n\n    const {handleLogin, isLoading, code} = LoginService();\n    const formik = formikInstance({\n        initialValues: {email: '', password: ''},\n        validationSchema: loginSchema(),\n        onSubmit: (values) => handleLogin(values)\n    });\n\n    useEffect(() => {\n        if (code === HttpResponse.OK) {\n            navigate(DEFAULT_ROUTE, {replace: true})\n        }\n    }, [code]);\n\n    return <LoginView\n        handleSubmit={formik.handleSubmit}\n        formikValues={formik.values}\n        handleChange={formik.handleChange}\n        formikErrors={formik.errors}\n        isSubmitting={isLoading}\n    />\n}\n\nexport default LoginContainer"],"names":["FormikConfig","_ref","initialValues","validationSchema","onSubmit","overrideConfig","validateOnBlur","validateOnChange","validateOnMount","enableReinitialize","propTypes","PropTypes","isRequired","formikInstance","props","formikConfig","useFormik","replaceDefaultRules","defaultRules","newRules","_Object$values","Object","keys","forEach","key","values","filter","item","passwordRules","required","min","allRulesObject","schema","Yup","shape","entries","fieldName","fieldRules","fieldSchema","rule","ruleName","params","split","LoginSchema","generateSchema","email","password","LoginService","dispatchLogin","loginSelector","useAuthLogic","userInfo","isLoading","code","handleLogin","async","payload","LoginView","lazy","LoginContainer","navigate","useNavigate","useEffect","isUserLoggedIn","DEFAULT_ROUTE","resetStore","formik","loginSchema","HttpResponse","OK","replace","_jsx","handleSubmit","formikValues","handleChange","formikErrors","errors","isSubmitting"],"sourceRoot":""}