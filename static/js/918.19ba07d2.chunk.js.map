{"version":3,"file":"static/js/918.19ba07d2.chunk.js","mappings":"+NAOA,MAkEA,EAlEyBA,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,kBACxCC,EAAgBJ,EAASK,IAAIC,KAC7BC,EAAoBP,EAASK,IAAIG,KACjCC,EAAcT,EAASU,KAErBC,EAAwB,WAAyB,IAAxBC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QAAGE,EACpCH,OAAoBG,IAAXH,ECNV,WACH,MAAMI,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAEhDC,EAAe,IAAIC,IAEzBN,EAAUO,SAAQ,CAACC,EAAOC,KACtBJ,EAAaK,IAAID,EAAI,IAGzB,MAAME,EAAoBC,MAAMC,KAAKR,GAE/BS,EAAkB,IAAIb,gBAI5B,OAFAU,EAAkBJ,SAASQ,GAASD,EAAgBE,OAAOD,EAAMf,EAAUiB,IAAIF,MAExED,CACX,CDVwCI,GAAoBtB,EAEpDd,GAASqC,EAAAA,EAAAA,KAA2B,IAEpCC,EAAAA,EAAcH,IAAI,oBAAqB,CAAErB,WAAUyB,MAAMC,IACrDxC,GAASyC,EAAAA,EAAAA,IAAuBD,EAAShC,KAAKA,OAC9CR,GAAS0C,EAAAA,EAAAA,IAA2BF,EAAShC,KAAKE,MAAM,IACzDiC,SAAQ,KACP3C,GAASqC,EAAAA,EAAAA,KAA2B,GAAO,GAEnD,EAoCA,MAAO,CACH/B,gBACAG,oBACAE,cACAE,wBACA+B,oBAvCyBC,IACzBP,EAAAA,EAAcH,IAAI,qBAADW,OAAsBD,IAAMN,MAAKC,IAC9CxC,GAAS+C,EAAAA,EAAAA,IAAqBP,EAAShC,KAAKA,MAAM,GACpD,EAqCFwC,mBAlCuBA,CAACC,EAAQC,KAChC,MAAM,cAACC,GAAiBD,EAExBZ,EAAAA,EAAcc,SAAS,oBAAqBH,GACvCV,MAAK,KACF1B,GAAuB,IAE1BwC,OAAOC,IAAUC,EAAAA,EAAAA,IAAmBD,EAAMd,SAAShC,KAAM0C,KACzDP,SAAQ,IAAMQ,GAAc,IAAO,EA2BxCK,oBAxBwBA,CAACP,EAAQJ,EAAIK,KACrC,MAAM,cAACC,GAAiBD,EAExBZ,EAAAA,EAAcc,SAAS,qBAADN,OAAsBD,GAAMI,GAC7CV,MAAK,KACF1B,GAAuB,IAE1BwC,OAAOC,IAAUC,EAAAA,EAAAA,IAAmBD,EAAMd,SAAShC,KAAM0C,KACzDP,SAAQ,IAAMQ,GAAc,IAAO,EAiBxCM,oBAdwBA,CAACZ,EAAIM,KAC7Bb,EAAAA,EAAcoB,OAAO,qBAADZ,OAAsBD,IACrCN,MAAK,IAAM1B,MACX8B,SAAQ,IAAMQ,GAAc,IAAO,EAY3C,E,cElEL,MAiCA,EAjCsBQ,CAACC,EAAiBlD,KACpC,MAAOmD,EAAgBC,IAAqBC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,QAC9CC,EAAaC,IAAuBH,EAAAA,EAAAA,WAASI,EAAAA,EAAAA,QAEpDC,EAAAA,EAAAA,YAAU,KACNR,GAAiB,GAClB,CAACK,EAAaJ,KAEjBO,EAAAA,EAAAA,YAAU,KACNN,EAAkBpD,EAAK2D,SACvBH,EAAoBxD,EAAKuD,YAAY,GACtC,CAACvD,IAaJ,MAAO,CACHmD,iBACAI,cACAK,iBAdsBC,IACtBL,EAAoBK,IACpBC,EAAAA,EAAAA,IAAuBD,EAAMV,EAAe,EAa5CY,oBAVyBJ,IACzBP,EAAkBO,IAClBG,EAAAA,EAAAA,IAAuBP,EAAaI,GACpCP,EAAkBO,EAAQ,EAQ1BH,sBACH,E,cChCL,MAIA,GAJyBQ,EAAAA,EAAAA,IAAe,CACpCC,MAAMC,EAAAA,EAAAA,Q,uBCIV,MAAMC,GAAgBC,EAAAA,EAAAA,OAAK,IAAM,uDAEpBC,EAAoB,CAC7BJ,KAAM,IAkFV,EA/E0BK,KACtB,MAAM,cACF1E,EAAa,kBACbG,EAAiB,YACjBE,EAAW,sBACXE,EAAqB,oBACrB+B,EAAmB,mBACnBI,EAAkB,oBAClBQ,EAAmB,oBACnBC,GACA1D,KAEGkF,EAAOC,IAAYnB,EAAAA,EAAAA,WAASoB,EAAAA,EAAAA,IAAW,CAAC,IACzCC,GAAUC,EAAAA,EAAAA,QAAO,MACjBC,GAASC,EAAAA,EAAAA,IAAe,CAC1BC,cAAeP,EAAQF,EAAoB,CACvCJ,KAAMhE,EAAYgE,MAEtBc,iBAAkBC,EAClBC,SAAUA,KACN,MAAMC,EAAW,IAAIC,SAAST,EAAQU,SAElCb,EACAjC,EAAmB4C,GAAUG,EAAAA,EAAAA,IAAkBT,IAE/C9B,EAAoBoC,EAAUjF,EAAYkC,IAAIkD,EAAAA,EAAAA,IAAkBT,GACpE,KAGF,eACFzB,EAAc,YACdI,EAAW,oBACXC,EAAmB,iBACnBI,EAAgB,oBAChBG,GACAd,EAAc9C,EAAuBJ,IAEnC,OACFwC,EAAM,OACN+C,EAAM,aACNC,EAAY,aACZC,EAAY,aACZC,EAAY,WACZC,EAAU,QACVC,EAAO,UACPC,EAAS,UACTC,GACAjB,EAEJ,OACIkB,EAAAA,EAAAA,KAAC3B,EAAa,CACVrE,KAAM,CAACF,gBAAeK,eACtB8F,QAAS7D,EACT8D,aAAe7D,GAAOY,EAAoBZ,EAAIyC,EAAOnC,eACrDwD,WAAY,CACRvB,UACAnC,SACA+C,SACAE,eACAD,eACAE,eACAE,UACAD,aACAE,YACAC,aAEJrB,SAAUA,EACV0B,iBAAkB,CACdlG,KAAMD,EACNoD,iBACAI,cACAC,sBACAI,mBACAG,wBAEN,C,sFCtFV,MAAMoC,EAAeC,IAAkE,IAAjE,cAACtB,EAAa,iBAAEC,EAAgB,SAAEE,EAAQ,eAAEoB,GAAeD,EAC7E,MAAO,CACHtB,gBACAwB,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,oBAAoB,EACpB1B,mBACAE,cACGoB,EACN,EAGLF,EAAaO,UAAY,CACrB5B,cAAe6B,IAAAA,OACf5B,iBAAkB4B,IAAAA,OAAiBC,WACnC3B,SAAU0B,IAAAA,KAAeC,YAG7B,U,kCCdO,MAAM/B,EAAkBgC,IAC3B,MAAMC,EAAeX,EAAaU,GAElC,OAAOE,EAAAA,EAAAA,IAAUD,EAAa,EAGrBjE,EAAqBA,CAACf,EAAUU,KACzC,MAAM,cAACsC,EAAa,UAAEkC,GAAaxE,EAE7ByE,EAAYC,OAAOC,KAAKrC,GAE9B,GAAIhD,EAASsF,OAASC,EAAAA,EAAaC,kBAAmB,CAClD,MAAMC,EAAY,CAAC,EAEnBN,EAAUlG,SAASyG,SACiBjH,IAA5BuB,EAAShC,KAAK0H,KACdD,EAAUC,GAAY1F,EAAShC,KAAK0H,GACxC,KAGC/C,EAAAA,EAAAA,IAAW8C,IACZP,EAAUO,EAElB,CAEA,MAAME,EAAoBP,OAAOC,KAAKrF,EAAShC,MAE/C,IAAK,IAAI4H,EAAI,EAAGA,EAAID,EAAkBnH,OAAQoH,IAC1C,IAAKT,EAAUU,SAASF,EAAkBC,IAAK,CAC3CE,EAAAA,EAAahF,MAAMd,EAAShC,KAAK2H,EAAkBC,KACnD,KACJ,CACJ,EAGSrC,EAAqBT,IACvB,CACHoC,UAAWpC,EAAOoC,UAClBlC,cAAeF,EAAOE,cACtBrC,cAAemC,EAAOnC,gBAI9BoC,EAAe6B,UAAY,CACvB5B,cAAe6B,IAAAA,OACf5B,iBAAkB4B,IAAAA,OAAiBC,WACnC3B,SAAU0B,IAAAA,KAAeC,WACzBP,eAAgBM,IAAAA,O,qFCpDpB,MAAMkB,GAAazD,EAAAA,EAAAA,OAAK,IAAM,gCAGjB0D,EAAuBC,IACzBjC,EAAAA,EAAAA,KAAC+B,EAAU,IAAKE,IAGpB,SAAStE,EAAmBI,GAK/B,OAJAA,EAAOmE,OAAOC,SAASpE,KAClBmE,OAAOE,UAAUrE,IAASA,EAAO,KAClCA,EAAO,GAEJA,CACX,CAEO,SAASP,EAAgBK,GAK5B,OAJAA,EAAUqE,OAAOC,SAAStE,KACrBqE,OAAOE,UAAUvE,IAAaA,EAAU,GAAKA,EAAU,OACxDA,EAAU,GAEPA,CACX,CAyBO,SAASG,EAAuBD,EAAMF,GACzC,MAAMwE,EAAgB,IAAI1H,gBAAgBC,OAAOC,SAASC,QAC1DuH,EAAcC,IAAI,OAAQ3E,EAAmBI,GAAMwE,YACnDF,EAAcC,IAAI,WAAY9E,EAAgBK,GAAS0E,YACvD,MAAMC,EAAM,GAAAlG,OAAM1B,OAAOC,SAAS4H,SAAQ,KAAAnG,OAAI+F,EAAcE,YAC5D3H,OAAO8H,QAAQC,UAAU,CAAEC,KAAMJ,GAAU,GAAIA,EACnD,C,2ECtDA,MAAMK,EAAU3H,GACJA,aAAiB4H,KA2B7B,EALqB,CACjBC,KApBeC,CAAC9H,EAAO+H,MAClBJ,EAAO3H,IACD+H,EAAY,8BAmBvBC,MAbgBC,CAACjI,EAAO+H,KAAiB,IAADG,EACxCC,QAAQC,IAAIpI,EAAOA,EAAMqI,KAAMrI,EAAMsI,MACrC,MAAMA,GAAY,OAALtI,QAAK,IAALA,GAAW,QAANkI,EAALlI,EAAOsI,YAAI,IAAAJ,OAAN,EAALA,EAAaK,MAAM,KAAK,KAAM,KAE3C,SAAKZ,EAAO3H,IAAmB,UAATsI,IACXP,EAAY,CAACS,QAAS,0BAGtB,GCjBFC,EAAsBA,CAACC,EAAcC,KAAc,IAADC,EAY3D,OAXID,GACAzC,OAAOC,KAAKwC,GAAU5I,SAASE,IACvB0I,EAAS1I,UACFyI,EAAazI,GAEpByI,EAAazI,GAAO0I,EAAS1I,EACjC,IAK0B,QAAlC2I,EAAO1C,OAAO3E,OAAOmH,UAAa,IAAAE,OAAA,EAA3BA,EAA6BC,QAAQtI,KAAWA,GAAK,EAGnDuI,EAAcH,GAOhBF,EANc,CACjBM,SAAU,WACVC,MAAO,QACPC,KAAM,QAG+BN,GAGhCzF,EAAeyF,GAOjBF,EANc,CACjBM,SAAU,WACVG,IAAK,UACLD,KAAM,QAG+BN,GAYhCQ,EAAiBR,GAOnBF,EANc,CACjBM,SAAU,WACVK,IAAK,QACLH,KAAM,QAG+BN,GAgC7C,EA7BwBU,IACpB,IAAIC,EAASC,EAAAA,KAAaC,MAAM,CAAC,GAuBjC,OArBAtD,OAAOuD,QAAQJ,GAAgBtJ,SAAQqF,IAA8B,IAA5BsE,EAAWC,GAAWvE,EAC3D,GAAIuE,EAAY,CACZ,IAAIC,EAAcL,EAAAA,KAElBI,EAAW5J,SAAS8J,IAChB,MAAOC,KAAa1K,GAAUyK,EAAKtB,MAAM,KAGrCqB,OAD2BrK,IAA3BwK,EAAaD,GACCF,EAAYI,KACtBF,EACA,SACA,CAAC9J,EAAKiK,KAAA,IAAE,YAAClC,GAAYkC,EAAA,OAAKF,EAAaD,GAAU9J,EAAO+H,KAAgB3I,EAAO,IAErEwK,EAAYE,MAAa1K,EAC3C,IAGJkK,EAASA,EAAOE,MAAM,CAAC,CAACE,GAAYE,GACxC,KAGGN,CAAM,C","sources":["modules/category/hooks/useCategoryLogic.js","utility/helpers/routeHelper.js","utility/hooks/usePagination.js","modules/category/validation/index.js","modules/category/containers/CategoryContainer.jsx","utility/formik/formikConfig.js","utility/formik/formikHelper.js","utility/helpers/paginationHelper.js","utility/validation/customSchema.js","utility/helpers/validationRuleHelper.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport axiosInstance from '../../../api/axiosInstance'\nimport {setAllCategoriesAction, setAllCategoriesMetaAction, setOneCategoryAction} from \"../redux\";\nimport { getUniqueParams } from \"../../../utility/helpers/routeHelper\";\nimport {allCategoriesLoadingAction} from \"../redux/loading\";\nimport {formikErrorHandler} from \"../../../utility/formik/formikHelper\";\n\nconst useCategoryLogic = () => {\n    const dispatch = useDispatch();\n    const selector = useSelector(state => state.categoryReducer),\n        allCategories = selector.all.data,\n        allCategoriesMeta = selector.all.meta,\n        oneCategory = selector.show;\n\n    const getAllCategoriesLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n\n        dispatch(allCategoriesLoadingAction(true))\n\n        axiosInstance.get('/admin/categories', { params }).then((response) => {\n            dispatch(setAllCategoriesAction(response.data.data))\n            dispatch(setAllCategoriesMetaAction(response.data.meta))\n        }).finally(() => {\n            dispatch(allCategoriesLoadingAction(false))\n        })\n    }\n\n    const getOneCategoryLogic = (id) => {\n        axiosInstance.get(`/admin/categories/${id}`).then(response => {\n            dispatch(setOneCategoryAction(response.data.data))\n        })\n    }\n\n    const storeCategoryLogic = (values, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        axiosInstance.postForm('/admin/categories', values)\n            .then(() => {\n                getAllCategoriesLogic()\n            })\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const updateCategoryLogic = (values, id, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        axiosInstance.postForm(`/admin/categories/${id}`, values)\n            .then(() => {\n                getAllCategoriesLogic()\n            })\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const deleteCategoryLogic = (id, setSubmitting) => {\n        axiosInstance.delete(`/admin/categories/${id}`)\n            .then(() => getAllCategoriesLogic())\n            .finally(() => setSubmitting(false))\n    }\n\n    return {\n        allCategories,\n        allCategoriesMeta,\n        oneCategory,\n        getAllCategoriesLogic,\n        getOneCategoryLogic,\n        storeCategoryLogic,\n        updateCategoryLogic,\n        deleteCategoryLogic\n    }\n}\n\nexport default useCategoryLogic;","export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}","// paginationLogic.js\nimport { useEffect, useState } from \"react\";\nimport {getValidPageNumber, getValidPerPage, updatePaginationParams} from \"../helpers/paginationHelper\";\n\nconst usePagination = (getAllDataLogic, meta) => {\n    const [currentPerPage, setCurrentPerPage] = useState(getValidPerPage());\n    const [currentPage, setCurrentPageState] = useState(getValidPageNumber());\n\n    useEffect(() => {\n        getAllDataLogic();\n    }, [currentPage, currentPerPage]);\n\n    useEffect(() => {\n        setCurrentPerPage(meta.perPage);\n        setCurrentPageState(meta.currentPage);\n    }, [meta]);\n\n    const handlePageChange = (page) => {\n        setCurrentPageState(page);\n        updatePaginationParams(page, currentPerPage);\n    };\n\n    const handlePerPageChange = (perPage) => {\n        setCurrentPerPage(perPage);\n        updatePaginationParams(currentPage, perPage);\n        setCurrentPerPage(perPage);\n    };\n\n    return {\n        currentPerPage,\n        currentPage,\n        handlePageChange,\n        handlePerPageChange,\n        setCurrentPageState\n    };\n};\n\nexport default usePagination;\n","import generateSchema, {stringRules} from \"../../../utility/helpers/validationRuleHelper\";\n\nconst validationSchema = generateSchema({\n    name: stringRules()\n})\n\nexport default validationSchema;","import {lazy, useRef, useState} from \"react\";\nimport useCategoryLogic from \"../hooks/useCategoryLogic\";\nimport usePagination from \"../../../utility/hooks/usePagination\";\nimport {buildFormikParams, formikInstance} from \"../../../utility/formik/formikHelper\";\nimport categoriesSchema from '../validation'\nimport {isObjEmpty} from \"../../../utility/Utils\";\n\nconst CategoryTable = lazy(() => import('../views/CategoryTable'));\n\nexport const emptyCategoryForm = {\n    name: ''\n};\n\nconst CategoryContainer = () => {\n    const {\n        allCategories,\n        allCategoriesMeta,\n        oneCategory,\n        getAllCategoriesLogic,\n        getOneCategoryLogic,\n        storeCategoryLogic,\n        updateCategoryLogic,\n        deleteCategoryLogic\n    } = useCategoryLogic();\n\n    const [inAdd, setInAdd] = useState(isObjEmpty({}))\n    const formRef = useRef(null)\n    const formik = formikInstance({\n        initialValues: inAdd ? emptyCategoryForm : {\n            name: oneCategory.name\n        },\n        validationSchema: categoriesSchema,\n        onSubmit: () => {\n            const formData = new FormData(formRef.current)\n\n            if (inAdd) {\n                storeCategoryLogic(formData, buildFormikParams(formik))\n            } else {\n                updateCategoryLogic(formData, oneCategory.id, buildFormikParams(formik))\n            }\n        }});\n\n    const {\n        currentPerPage,\n        currentPage,\n        setCurrentPageState,\n        handlePageChange,\n        handlePerPageChange\n    } = usePagination(getAllCategoriesLogic, allCategoriesMeta);\n\n    const {\n        values,\n        errors,\n        handleChange,\n        isSubmitting,\n        handleSubmit,\n        handleBlur,\n        isValid,\n        resetForm,\n        setValues\n    } = formik\n\n    return (\n        <CategoryTable\n            data={{allCategories, oneCategory}}\n            showOne={getOneCategoryLogic}\n            handleDelete={(id) => deleteCategoryLogic(id, formik.setSubmitting)}\n            formFields={{\n                formRef,\n                values,\n                errors,\n                isSubmitting,\n                handleChange,\n                handleSubmit,\n                isValid,\n                handleBlur,\n                resetForm,\n                setValues\n        }}\n            setInAdd={setInAdd}\n            paginationObject={{\n                meta: allCategoriesMeta,\n                currentPerPage,\n                currentPage,\n                setCurrentPageState,\n                handlePageChange,\n                handlePerPageChange\n            }}\n        />\n    );\n};\n\nexport default CategoryContainer;\n","import PropTypes from \"prop-types\";\n\nconst FormikConfig = ({initialValues, validationSchema, onSubmit, overrideConfig}) => {\n    return {\n        initialValues,\n        validateOnBlur: true,\n        validateOnChange: false,\n        validateOnMount: false,\n        enableReinitialize: true,\n        validationSchema,\n        onSubmit,\n        ...overrideConfig\n    }\n}\n\nFormikConfig.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default FormikConfig","import {useFormik} from \"formik\";\nimport FormikConfig from \"./formikConfig\";\nimport PropTypes from \"prop-types\";\nimport {HttpResponse} from \"../../constants/api\";\nimport toastFactory from \"../factories/toastFactory\";\nimport {isObjEmpty} from \"../Utils\";\n\nexport const formikInstance = (props) => {\n    const formikConfig = FormikConfig(props)\n\n    return useFormik(formikConfig)\n}\n\nexport const formikErrorHandler = (response, formikObject) => {\n    const {initialValues, setErrors} = formikObject;\n\n    const errorKeys = Object.keys(initialValues);\n\n    if (response.code === HttpResponse.VALIDATION_ERRORS) {\n        const tmpErrors = {}\n\n        errorKeys.forEach((errorKey) => {\n            if (response.data[errorKey] !== undefined) {\n                tmpErrors[errorKey] = response.data[errorKey]\n            }\n        })\n\n        if (!isObjEmpty(tmpErrors)) {\n            setErrors(tmpErrors)\n        }\n    }\n\n    const responseErrorKeys = Object.keys(response.data);\n\n    for (let i = 0; i < responseErrorKeys.length; i++) {\n        if (!errorKeys.includes(responseErrorKeys[i])) {\n            toastFactory.error(response.data[responseErrorKeys[i]])\n            break;\n        }\n    }\n}\n\nexport const buildFormikParams = (formik) => {\n    return {\n        setErrors: formik.setErrors,\n        initialValues: formik.initialValues,\n        setSubmitting: formik.setSubmitting\n    }\n}\n\nformikInstance.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    overrideConfig: PropTypes.object\n}","import { lazy } from \"react\"\n\nconst Pagination = lazy(() => import('../../components/table/PaginationComponent'))\nimport { getUniqueParams } from \"./routeHelper\";\n\nexport const paginationComponent = (args) => {\n    return <Pagination {...args} />\n}\n\nexport function getValidPageNumber(page) {\n    page = Number.parseInt(page);\n    if (!Number.isInteger(page) || page < 1) {\n        page = 1;\n    }\n    return page;\n}\n\nexport function getValidPerPage(perPage) {\n    perPage = Number.parseInt(perPage);\n    if (!Number.isInteger(perPage) || (perPage < 5 || perPage > 100)) {\n        perPage = 5;\n    }\n    return perPage;\n}\n\nexport function getCurrentPage() {\n    const { page } = getUniqueParams(); // Assuming you have defined a 'page' parameter in your route\n    return getValidPageNumber(page);\n}\n\nexport function getPerPage() {\n    const { perPage } = getUniqueParams(); // Assuming you have defined a 'perPage' parameter in your route\n    return getValidPerPage(perPage);\n}\n\nexport function getNextPageNumber() {\n    let currentPage = getCurrentPage();\n    return ++currentPage;\n}\n\nexport function getPreviousPageNumber() {\n    let currentPage = getCurrentPage();\n    if (currentPage <= 1) {\n        return 1;\n    }\n    return --currentPage;\n}\n\nexport function updatePaginationParams(page, perPage) {\n    const updatedParams = new URLSearchParams(window.location.search);\n    updatedParams.set('page', getValidPageNumber(page).toString());\n    updatedParams.set('per_page', getValidPerPage(perPage).toString());\n    const newUrl = `${window.location.pathname}?${updatedParams.toString()}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}\n\n\nexport function generatePaginationParams(page, perPage) {\n    page = getCurrentPage()\n    perPage = getPerPage()\n\n    return {page, per_page: perPage}\n}","const isFile = (value) => {\n    return (value instanceof File)\n}\n\nconst fileSchema = (value, createError) => {\n    if (!isFile(value)) {\n        return createError('field must be a valid file')\n    }\n\n    return true;\n}\n\nconst imageSchema = (value, createError) => {\n    console.log(value, value.size, value.type)\n    const type = value?.type?.split('/')[0] || null;\n\n    if (!isFile(value) || type !== 'image') {\n        return createError({message: 'field must be an image'})\n    }\n\n    return true;\n}\n\nconst customSchema = {\n    file: fileSchema,\n    image: imageSchema\n}\n\nexport default customSchema","import * as Yup from 'yup'\nimport customSchema from \"../validation/customSchema\";\n\nexport const replaceDefaultRules = (defaultRules, newRules) => {\n    if (newRules) {\n        Object.keys(newRules).forEach((key) => {\n            if (newRules[key]) {\n                delete defaultRules[key]\n            } else {\n                defaultRules[key] = newRules[key]\n            }\n        })\n    }\n\n\n    return Object.values(defaultRules)?.filter((item) => !!item)\n}\n\nexport const emailRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        email: 'email',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const stringRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        max: 'max:255',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const imageRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        image: 'image'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const passwordRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        min: 'min:8',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nconst generateSchema = (allRulesObject) => {\n    let schema = Yup.object().shape({});\n\n    Object.entries(allRulesObject).forEach(([fieldName, fieldRules]) => {\n        if (fieldRules) {\n            let fieldSchema = Yup.string();\n\n            fieldRules.forEach((rule) => {\n                const [ruleName, ...params] = rule.split(':');\n\n                if (customSchema[ruleName] !== undefined) {\n                    fieldSchema = fieldSchema.test(\n                        ruleName,\n                        'error',\n                        (value, {createError}) => customSchema[ruleName](value, createError, ...params));\n                } else {\n                    fieldSchema = fieldSchema[ruleName](...params);\n                }\n            });\n\n            schema = schema.shape({[fieldName]: fieldSchema});\n        }\n    });\n\n    return schema;\n};\n\n\nexport const yupInstance = Yup;\nexport default generateSchema"],"names":["useCategoryLogic","dispatch","useDispatch","selector","useSelector","state","categoryReducer","allCategories","all","data","allCategoriesMeta","meta","oneCategory","show","getAllCategoriesLogic","params","arguments","length","undefined","urlParams","URLSearchParams","window","location","search","uniqueParams","Set","forEach","value","key","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","append","get","getUniqueParams","allCategoriesLoadingAction","axiosInstance","then","response","setAllCategoriesAction","setAllCategoriesMetaAction","finally","getOneCategoryLogic","id","concat","setOneCategoryAction","storeCategoryLogic","values","formikObject","setSubmitting","postForm","catch","error","formikErrorHandler","updateCategoryLogic","deleteCategoryLogic","delete","usePagination","getAllDataLogic","currentPerPage","setCurrentPerPage","useState","getValidPerPage","currentPage","setCurrentPageState","getValidPageNumber","useEffect","perPage","handlePageChange","page","updatePaginationParams","handlePerPageChange","generateSchema","name","stringRules","CategoryTable","lazy","emptyCategoryForm","CategoryContainer","inAdd","setInAdd","isObjEmpty","formRef","useRef","formik","formikInstance","initialValues","validationSchema","categoriesSchema","onSubmit","formData","FormData","current","buildFormikParams","errors","handleChange","isSubmitting","handleSubmit","handleBlur","isValid","resetForm","setValues","_jsx","showOne","handleDelete","formFields","paginationObject","FormikConfig","_ref","overrideConfig","validateOnBlur","validateOnChange","validateOnMount","enableReinitialize","propTypes","PropTypes","isRequired","props","formikConfig","useFormik","setErrors","errorKeys","Object","keys","code","HttpResponse","VALIDATION_ERRORS","tmpErrors","errorKey","responseErrorKeys","i","includes","toastFactory","Pagination","paginationComponent","args","Number","parseInt","isInteger","updatedParams","set","toString","newUrl","pathname","history","pushState","path","isFile","File","file","fileSchema","createError","image","imageSchema","_value$type","console","log","size","type","split","message","replaceDefaultRules","defaultRules","newRules","_Object$values","filter","emailRules","required","email","trim","max","passwordRules","min","allRulesObject","schema","Yup","shape","entries","fieldName","fieldRules","fieldSchema","rule","ruleName","customSchema","test","_ref2"],"sourceRoot":""}